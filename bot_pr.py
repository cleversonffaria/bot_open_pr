import os
from dotenv import load_dotenv
import requests
import json

BOT_PATH = os.getenv("BOT_PATH")

# Caminho absoluto do diret√≥rio onde est√° o script
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

# Carrega vari√°veis do .env no mesmo diret√≥rio do script
load_dotenv(dotenv_path=os.path.join(SCRIPT_DIR, ".env"))

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL = os.getenv("MODEL")
# Caminho absoluto para os arquivos
report_path = os.path.join(SCRIPT_DIR, "pr_report.txt")
description_path = os.path.join(SCRIPT_DIR, "pr_description.txt")

# L√™ o diff salvo em pr_report.txt
with open(report_path, "r", encoding="utf-8") as f:
    diff = f.read()

prompt = """
Analise as altera√ß√µes de c√≥digo a seguir e gere um relat√≥rio detalhado seguindo EXATAMENTE este formato:

**Feature:** [T√≠tulo resumido da funcionalidade ou altera√ß√£o principal]

**Descri√ß√£o:**
[Breve explica√ß√£o do que foi implementado ou alterado]

**Resumo:**
[Resumo t√©cnico das principais mudan√ßas implementadas]

**Descri√ß√£o do problema:**
[Contextualize o problema ou necessidade antes da altera√ß√£o]

**Solu√ß√£o implementada:**
[Liste as principais mudan√ßas t√©cnicas:]
- ‚ûï [Para adi√ß√µes/cria√ß√µes]
- üîß [Para l√≥gica de neg√≥cio/fun√ß√µes]
- üì¶ [Para componentes/m√≥dulos]
- üß™ [Para testes]
- üõ£Ô∏è [Para rotas/APIs]
- üìù [Para configura√ß√µes/documenta√ß√£o]
- üé® [Para melhorias de UI/UX]
- üöÄ [Para otimiza√ß√µes]

**Impacto Esperado:**
[Explique os benef√≠cios, melhorias ou resultados esperados ap√≥s a implementa√ß√£o]

Seja t√©cnico, detalhado e mantenha EXATAMENTE esta estrutura em formato markdown.

Altera√ß√µes de c√≥digo:
""" + diff

def make_api_request(prompt_content):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "localhost",
        "X-Title": "bot_pr_script"
    }

    payload = {
        "model": MODEL,
        "messages": [
            {
                "role": "system", 
                "content": "Voc√™ √© um assistente especializado em an√°lise de c√≥digo que gera relat√≥rios detalhados para Pull Requests. Use formata√ß√£o markdown e emojis moderadamente apenas nos itens das listas."
            },
            {"role": "user", "content": prompt_content}
        ],
        "max_tokens": 1000,
        "temperature": 0.3,
    }

    try:
        print("üöÄ Enviando requisi√ß√£o para a API...")
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=60
        )
        
        return response
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def process_response(response):
    if not response:
        return None
        
    if not response.content:
        print("‚ùå Resposta vazia da API!")
        print(f"Status code: {response.status_code}")
        return None

    try:
        data = response.json()
        if "choices" not in data or not data["choices"]:
            print("‚ùå Formato de resposta inv√°lido")
            print(f"Resposta: {data}")
            return None
            
        return data["choices"][0]["message"]["content"].strip()
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro ao decodificar JSON: {e}")
        print(f"Conte√∫do da resposta: {response.text}")
        return None

def save_result(summary):
    try:
        with open(description_path, "w", encoding="utf-8") as f:
            f.write(summary)
        print("‚úÖ Resumo gerado e salvo em pr_description.txt")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar arquivo: {e}")
        return False

def show_preview(summary):
    print("\n" + "="*60)
    print("üìã PREVIEW DO RELAT√ìRIO GERADO")
    print("="*60)
    print(summary)
    print("="*60 + "\n")

def main():
    print("ü§ñ Iniciando gera√ß√£o de relat√≥rio de PR...")
    
    # Verificar se o arquivo de diff existe
    if not os.path.exists(report_path):
        print(f"‚ùå Arquivo {report_path} n√£o encontrado!")
        return
    
    # Fazer requisi√ß√£o para a API do OpenRouter
    response = make_api_request(prompt)
    
    # Processar resposta da API do OpenRouter
    summary = process_response(response)
    
    if not summary:
        print("‚ùå Falha ao gerar o relat√≥rio")
        return
    
    # Exibir preview
    show_preview(summary)
    
    # Salvar resultado
    if save_result(summary):
        print("üéâ Processo conclu√≠do com sucesso!")
    else:
        print("‚ùå Falha ao salvar o arquivo")

if __name__ == "__main__":
    main()
